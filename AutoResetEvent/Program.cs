using System;
using System.Threading;

class Program
{
    static AutoResetEvent waitEvent = new AutoResetEvent(true); // Переводим объект в сигнальное состояние в конструкторе.
    static int x;

    static void Main(string[] args)
    {
        for (int i = 0; i < 5; i++) // Пять итераций в которых будет запущено 5 потоков.
        {
            Thread newThread = new Thread(CountMethod); // Создаем обьект потока и передаем ему ссылку на метод.
            newThread.Name = "Поток №" + i.ToString();// Присваиваем имя каждому потоку.
            newThread.Start(); // Запускаем потоки.
        }

        Console.ReadLine();
    }
    public static void CountMethod()
    {
        waitEvent.WaitOne(); // Из метода, который выполняется в каждом потоке запускаем WaitOne, чтобы перевести потоки в состояние ожидания сигнального состояния. Теперь все потоки в состоянии ожидания.
        Console.WriteLine("Printing");
        for (x = 1; x < 9; x++)
        {
            Console.WriteLine("{0}: {1}", Thread.CurrentThread.Name, x);
            Thread.Sleep(400);
        }
        //Если закоментировать, то другие потоки не смогут продолжить работу
        waitEvent.Set(); // Переводим объект в сигнальное состоянии, чтобы другой поток мог захватить ресурс.
        
    }
}


/*
Класс AutoResetEvent еще одно средство синхронизации потоков. Его способ – это информирование потоков о событиях. Сам класс является событием, оболочкой вокруг события операционной системы. AutoResetEvent – потомок EventWaitHandle, класса, реализующего сброс состояний системных событий (операционной системы).

Функциональность AutoResetEvent дополняет действия класса ManualResetEvent, который управляет ручным сбросом событий. 
*/
/*
Объект класса AutoResetEvent служит для уведомления, ожидающего (доступа к объекту блокировки) потока о произошедшем событии.  Таким образом потоки взаимодействуют друг с другом через передачу сигналов посредством объекта класса AutoResetEvent. Сигналы присваиваются объекту (общему ресурсу), к которому получают доступ в своей работе потоки. AutoResetEvent управляет сигнальными состояниями этого объекта.

Потоки обращаются к объекту класса AutoResetEvent, вызывая метод WaitOne, чтобы узнать находится ли объект, к которому осуществляется доступ в сигнальном состоянии. Если объект AutoResetEvent в несигнальном состоянии, то текущий поток блокируется и ожидает поток, который в данный момент контролирует ресурс.

Чтобы освободить ресурс от ожидания нужно использовать метод Set. AutoResetEvent будет в сигнальном состоянии если хотя бы один поток ожидает. Если ни один поток не находится в состоянии ожидания, то AutoResetEvent будет в сигнальном состоянии бесконечно.

Если поток вызовет WaitOne, когда объект AutoResetEvent находится в сигнальном состоянии, то он не будет заблокирован, поток освободится, а объект AutoResetEvent перейдет в несигнальном состоянии.

Кроме методов WaitOne и Set задать сигнальное состояния объекта класса AutoResetEvent может его конструктор, принимающий в качестве параметра значения типа bool: AutoResetEvent(Boolean). 
*/