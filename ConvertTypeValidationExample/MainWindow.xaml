<Window x:Class="ConvertTypeValidationExample.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ConvertTypeValidationExample"
        mc:Ignorable="d"
        Title="MainWindow" Height="200" Width="500" x:Name="wndMain">
    <Window.Resources>
        <Style TargetType="TextBlock">
            <Setter Property="Width" Value="250"/>
            <Setter Property="DockPanel.Dock" Value="Left"/>
        </Style>
        <Style TargetType="TextBox">
            <Setter Property="Width" Value="Auto"/>
        </Style>
        <!--стили для ошибок-->
        <ControlTemplate x:Key="TextBoxErrorTemplate">
            <StackPanel Orientation="Horizontal">
                <Border BorderBrush="Violet" BorderThickness="4">
                    <AdornedElementPlaceholder />
                </Border>
                <TextBlock Foreground="Red"  FontWeight="Bold">!!!</TextBlock>
            </StackPanel>
        </ControlTemplate>
    </Window.Resources>
    <StackPanel VerticalAlignment="Top" DataContext="{Binding Man,ElementName=wndMain}">
        <DockPanel>
            <TextBlock>Name(IDataError)</TextBlock>
            <TextBox>
                <TextBox.Text>
                    <!--
                    
                   ValidatesOnDataErrors используется в толстых клиентах,
                    или другими словами, когда валидация предподчтительна на стороне клиента, например в WPF или WinForm приложениях, в которых реализованы IDataErrorInfo                    
                    
                    ValidatesOnNotifyDataErrors может быть лучше, для тонких клиентов   (много-уровневые приложения) такие как клиент-серверные приложения (Silverlight, WPF with WCF, etc ..) 
                    где валидация происходит на сервере
                    -->
                    <!--NotifyOnValidationError - Возвращает или задает значение, указывающее, следует ли вызывать подключенное к Error событие в привязанном объекте.  -->
                    <!--NotifyOnValidationError - Сработает, если только ValidatesOnDataErros=True.  -->
                    <!--ValidatesOnDataErrors - Получает или задает значение, указывающее, включать ли объект DataErrorValidationRule.-->
                    <Binding Path="Name" UpdateSourceTrigger="PropertyChanged" Mode="TwoWay" NotifyOnValidationError="False" ValidatesOnDataErrors="True">
                    </Binding>
                </TextBox.Text>
            </TextBox>
        </DockPanel>
        <!--Пример различных способов обработки ошибок -->
        <DockPanel>
            <TextBlock>Field0 - проверка по умолчанию</TextBlock><!--Даже если отключены все проверки, но произайдет ошибка, то будет выдано предупреждение, так как реализован интерфейс-->
            <TextBox Text="{Binding Path=Field0,  UpdateSourceTrigger=PropertyChanged, Mode=TwoWay, ValidatesOnExceptions=False, NotifyOnValidationError=False, ValidatesOnNotifyDataErrors=False}"/>
        </DockPanel>
        <DockPanel>
            <TextBlock  DataContext="{Binding Man1,ElementName=wndMain}">Field0 - проверка по умолчанию в Man1</TextBlock>
            <!--В Man1 не реализованы интерфейс проверки ошибок, ощибки не будут перехватываться-->
            <TextBox Text="{Binding Path=Field0,  UpdateSourceTrigger=PropertyChanged, Mode=TwoWay, ValidatesOnExceptions=False, NotifyOnValidationError=False, ValidatesOnNotifyDataErrors=False}"/>
        </DockPanel>
        <!--*****   ValidatesOnExceptions - Получает или задает значение, указывающее, включать ли объект ExceptionValidationRule ******-->
        <DockPanel>
            <TextBlock>StringField - включили проверку</TextBlock>
            <TextBox Text="{Binding StringField,UpdateSourceTrigger=PropertyChanged,Mode=TwoWay, ValidatesOnExceptions=True}" Validation.ErrorTemplate="{StaticResource TextBoxErrorTemplate}"/>
        </DockPanel>
        <DockPanel>
            <TextBlock>StringField - отключили проверку</TextBlock>
            <TextBox Text="{Binding StringField,UpdateSourceTrigger=PropertyChanged,Mode=TwoWay, ValidatesOnExceptions=False}"/>
        </DockPanel>
        <!--*************************************************-->
        <DockPanel>
            <!--Если в этом примере NotifyOnValidationError переключить в False, то не будет вызываться подключенное событие и не будет всплывающего окна(смотри код cs)-->
            <TextBlock>Field3 - ошибка конвертации(TextBox_Error)</TextBlock>
            <TextBox Text="{Binding Field3,UpdateSourceTrigger=PropertyChanged,Mode=TwoWay, NotifyOnValidationError=True}" 
                      Validation.Error="Field3_Error"/>
        </DockPanel>
        <DockPanel>
            <TextBlock>Field4 - пользовательское правило</TextBlock>
            <TextBox>
                <TextBox.Text>
                    <Binding Path="Field4" UpdateSourceTrigger="PropertyChanged" Mode="TwoWay" NotifyOnValidationError="True">
                             <Binding.ValidationRules>
                                 <DataErrorValidationRule/>
                             </Binding.ValidationRules>
                    </Binding>
                </TextBox.Text>                
            </TextBox>
        </DockPanel>
        <!-- Модель присоединенного события -->
        <DockPanel>
            <TextBlock>Field5 - Error Template (ToolTip)</TextBlock>
            <TextBox Text="{Binding Field5,UpdateSourceTrigger=PropertyChanged,Mode=TwoWay, NotifyOnValidationError=True}" Validation.Error="Field5_Error" Validation.ErrorTemplate="{StaticResource TextBoxErrorTemplate}"/>
        </DockPanel>
        <!-- UpdateSourceExceptionFilter -->
        <DockPanel>
            <TextBlock>Field6 - UpdateSourceExceptionFilter</TextBlock>
            <TextBox x:Name="tbField6">
                <TextBox.Text>
                    <Binding Path="Field6" UpdateSourceTrigger="PropertyChanged" Mode="TwoWay" NotifyOnValidationError="True">
                        <Binding.ValidationRules>
                            <ExceptionValidationRule/>
                            <!--ExceptionValidationRule— Это встроенное правило проверки, которое проверяет наличие исключений, 
                            возникающих во время обновления свойства источника привязки. Если ExceptionValidationRule объект связан с Binding объектом, 
                            можно использовать это свойство, чтобы задать для обработчика настраиваемую логику для обработки этих исключений. 
                            Если для элемента Binding не указано UpdateSourceExceptionFilter, механизм привязки создает ValidationError с исключением и добавляет его в 
                            коллекцию Validation.Errors связанного элемента.
                            -->
                        </Binding.ValidationRules>
                    </Binding>
                </TextBox.Text>
            </TextBox>
        </DockPanel>
    </StackPanel>
</Window>
